{"version":3,"sources":["Taskbox.js","App.js","serviceWorker.js","index.js"],"names":["Taskbox","props","createTasks","bind","item","key","text","onClick","delete","className","src","this","deleteitem","listItems","entries","map","React","Component","App","addItem","deletefunc","state","items","e","_inputElement","value","newItem","Date","now","setState","prevState","concat","preventDefault","newarr","filter","onSubmit","ref","a","placeholder","type","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iTAgCeA,G,iBA1BX,WAAYC,GAAQ,IAAD,8BACnB,4CAAMA,KAEDC,YAAc,EAAKA,YAAYC,KAAjB,gBAHA,E,yEAMPC,GAAO,IAAD,OAClB,OAAO,wBAAIC,IAAKD,EAAKC,KAAK,6BAAK,2BAAID,EAAKE,OAAe,yBAAKC,QAAS,kBAAM,EAAKC,OAAOJ,EAAKC,MAAMI,UAAU,eAAeC,IAAI,uB,6BAGzHL,GACNM,KAAKV,MAAMW,WAAWP,K,+BAItB,IACIQ,EADcF,KAAKV,MAAMa,QACDC,IAAIJ,KAAKT,aAErC,OACE,wBAAIO,UAAU,WACTI,O,GAvBWG,IAAMC,YCuEbC,G,kBApEZ,WAAYjB,GACX,IAAD,8BACG,4CAAMA,KAEFkB,QAAU,EAAKA,QAAQhB,KAAb,gBACf,EAAKiB,WAAW,EAAKA,WAAWjB,KAAhB,gBAChB,EAAKkB,MAAQ,CACRC,MAAO,IANd,E,qEAWQC,GACT,GAAiC,KAA7BZ,KAAKa,cAAcC,MAAc,CAElC,IAAIC,EAAU,CACbpB,KAAMK,KAAKa,cAAcC,MACzBpB,IAAKsB,KAAKC,OAGZjB,KAAKkB,SAAS,SAACC,GACb,MAAO,CACLR,MAAOQ,EAAUR,MAAMS,OAAOL,MAIlCf,KAAKa,cAAcC,MAAQ,GAK7BF,EAAES,mB,iCAGS3B,GAER,IAAI4B,EAAStB,KAAKU,MAAMC,MAAMY,OAAO,SAAU9B,GAChD,OAAQA,EAAKC,MAAQA,IAGpBM,KAAKkB,SAAS,CACXP,MAAOW,M,+BAID,IAAD,OACT,OACI,6BACK,0BAAME,SAAUxB,KAAKQ,SAClB,2BAAOiB,IAAK,SAACC,GAAD,OAAO,EAAKb,cAAgBa,GAAGC,YAAY,mBAEvD,4BAAQC,KAAK,UAAb,QAKF,kBAAC,EAAD,CAASzB,QAASH,KAAKU,MAAMC,MAAOV,WAAYD,KAAKS,kB,GA1DjDJ,IAAMC,YCQJuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d650b087.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport './Mycss.css';\r\n\r\nclass Taskbox extends React.Component\r\n{\r\n    \r\n    constructor(props) {\r\n    super(props);\r\n \r\n    this.createTasks = this.createTasks.bind(this);\r\n  }\r\n\r\n    createTasks(item) {\r\n    return <li key={item.key}><div><p>{item.text}</p></div><img onClick={() => this.delete(item.key)} className=\"deletebutton\" src=\"./deleteimg.png\"/></li>\r\n  }\r\n\r\n   delete(key) {\r\n    this.props.deleteitem(key);\r\n  }\r\n \r\n  render() {\r\n    var todoEntries = this.props.entries;\r\n    var listItems = todoEntries.map(this.createTasks);\r\n \r\n    return (\r\n      <ul className=\"theList\">\r\n          {listItems}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Taskbox;\r\n","import React,{Component} from 'react';\nimport Taskbox from './Taskbox';\nimport './App.css';\nimport './Mycss.css';\nclass App extends React.Component\n{  \n   constructor(props)\n   {\n      super(props);\n     \n     this.addItem = this.addItem.bind(this);\n     this.deletefunc=this.deletefunc.bind(this);\n     this.state = {\n          items: []\n           };\n   }\n\n  \n   addItem(e) {\n  if (this._inputElement.value !== \"\") {\n    // console.log(this.state.items);\n     var newItem = {\n      text: this._inputElement.value,\n      key: Date.now()\n    };\n \n    this.setState((prevState) => {\n      return { \n        items: prevState.items.concat(newItem) \n      };\n    });\n   \n    this._inputElement.value = \"\";\n  }\n   \n  \n     \n  e.preventDefault();\n}\n\n  deletefunc(key)\n  {\n     var newarr = this.state.items.filter(function (item) {\n    return (item.key !== key);\n     });\n \n     this.setState({\n        items: newarr\n      });\n  }\n\n    render() {\n    return (\n        <div >\n             <form onSubmit={this.addItem}>\n                <input ref={(a) => this._inputElement = a} placeholder=\"Enter New Task\">\n                </input>\n                <button type=\"submit\">Add</button>\n             </form>\n             \n          \n              \n              <Taskbox entries={this.state.items} deleteitem={this.deletefunc} />\n\n             \n                 \n                    \n               </div>\n    \n    );\n    \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}